{"version":3,"sources":["components/TopBar.js","components/pokemon/History.js","components/pokemon/PokeCell.js","components/pokemon/PokeList.js","components/pokemon/Pokemon.js","App.js","reportWebVitals.js","index.js"],"names":["TopBar","className","href","React","Component","history","PokeCell","props","getAPIData","bind","state","name","imageURL","pokemonIndex","pokeForm","poke","url","this","fetch","response","json","responseJSON","setState","Name","split","length","slice","toLowerCase","map","letter","charAt","toUpperCase","substring","join","Button","onClick","push","src","alt","PokeList","pokemon","responsePokemon","results","Pokemon","pokemonID","nurl","match","purl","params","pokeurl","CapName","weight","height","base_experience","variant","color","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c46d09cd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass TopBar extends React.Component {\r\n    render () {\r\n        return (<div className = \"navbar\">\r\n            <h1 className = \"Title\">Pokedex</h1>\r\n            <p className = \"Knowmore\">To know more, visit\r\n                <a href =\"https://www.pokemon.com/us/pokedex/\">  https://www.pokemon.com/us/pokedex/</a>\r\n            </p>\r\n            </div>);\r\n    }\r\n}\r\nexport default TopBar;","import {createBrowserHistory as history} from 'history';\r\n\r\nexport default history();\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport history from './History';\r\n\r\n\r\nclass PokeCell extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.getAPIData = this.getAPIData.bind(this);                                 // for API call\r\n        this.state = {name: '', imageURL: '',pokemonIndex: '', pokeForm: '',poke: []} // state variables\r\n        this.pokeForm = this.pokeForm.bind(this);                                     // for button press\r\n    }\r\n\r\n    async getAPIData() {\r\n        // This code is provided, it can be complicated\r\n        const url = this.props.url; // URL of the API\r\n        const response = await fetch(url); // Get the data from the PokeAPI\r\n\r\n        const responseJSON = await response.json(); // Turn the data into a JSON object that we can use\r\n        this.setState(\r\n            {\r\n                poke: responseJSON\r\n            }\r\n        );\r\n    }\r\n    componentDidMount()\r\n    {\r\n        this.getAPIData(); // Start getting the API data from PokeAPI\r\n        const url = this.props.url; // url of individual pokemon\r\n        const Name = this.props.name;   // name of the pokemon \r\n        const pokemonIndex = url.split(\"/\")[url.split('/').length -2]; // getting index of pokemon\r\n        const stringurl1 = \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/1.png\"; // sprites\r\n        const backstring1 = stringurl1.slice(0,73); // splitting above string till pokemon/\r\n        const imageURL = backstring1 + pokemonIndex + \".png\"; // creating the imageURL using sprites for each pokemon\r\n        this.setState({name: Name, imageURL: imageURL, pokemonIndex:pokemonIndex}); // updating the state variables\r\n    }\r\n\r\n    pokeForm(){\r\n        const stringurl2 = \"https://www.pokemon.com/us/pokedex/\"; // main URL for pokedex\r\n        const pokeForm = stringurl2 + this.state.name + \"/\";      // creating the url for each pokemon in pokedex\r\n        this.setState({pokeForm: pokeForm});                      // updating the state variable  \r\n    }\r\n\r\n    render () {\r\n        // Converting all names from lower case into the format \"Abcdef..\"\"\r\n        const Name  = this.state.name.toLowerCase().split(' ').map((letter) => letter.charAt(0).toUpperCase() + letter.substring(1)).join(' ');\r\n        // Return some JSX here...\r\n        return (\r\n            <div className = \"pokecell\">\r\n                    <p className = \"PokeName\">{Name}</p> \r\n                    <Button onClick = {() => history.push(`/${this.state.pokemonIndex}`)}>\r\n                            <img className = \"pokeimage\" src = {this.state.imageURL} alt = {this.state.name} />\r\n                    </Button>\r\n            </div>\r\n        );\r\n        \r\n    }\r\n}\r\n\r\n\r\nexport default PokeCell;\r\n","import React from 'react';\r\nimport PokeCell from './PokeCell';\r\n\r\n\r\n\r\nclass PokeList extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.getAPIData = this.getAPIData.bind(this);\r\n        this.state = {pokemon: []};\r\n    }\r\n\r\n    async getAPIData() {\r\n        // This code is provided, it can be complicated\r\n        const url = \"https://pokeapi.co/api/v2/pokemon?limit=100&offset=0\"; // URL of the API\r\n        const response = await fetch(url); // Get the data from the PokeAPI\r\n        const responseJSON = await response.json(); // Turn the data into a JSON object that we can use\r\n        const responsePokemon = responseJSON.results;\r\n\r\n        this.setState(\r\n            { pokemon: responsePokemon }// Add the pokemon we got from the API to the pokemon state\r\n        );\r\n    }\r\n    componentDidMount() {\r\n        // Start getting the API data from PokeAPI\r\n        this.getAPIData();\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div>\r\n               {this.state.pokemon.map(pokemon => (<PokeCell \r\n               key={pokemon.name} name={pokemon.name} url={pokemon.url}/>))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default PokeList;","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport history from './History';\r\n\r\nclass Pokemon extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.getAPIData = this.getAPIData.bind(this);       \r\n        this.state = {imageURL: '', pokemonID: '', poke: []}\r\n    }\r\n\r\n    async getAPIData() {\r\n        // This code is provided, it can be complicated\r\n        const url = \"https://pokeapi.co/api/v2/pokemon\";\r\n        const nurl = this.props.match.url;\r\n        const purl = url + nurl; // URL of the API\r\n        const response = await fetch(purl); // Get the data from the PokeAPI\r\n        const responseJSON = await response.json(); // Turn the data into a JSON object that we can use\r\n        this.setState(\r\n            {\r\n                poke: responseJSON\r\n            }\r\n        );\r\n    }\r\n    \r\n    componentDidMount() {\r\n        // Start getting the API data from PokeAPI\r\n        this.getAPIData();\r\n        const pokemonIndex = this.props.match.params.pokemonID;\r\n        const stringurl1 = \"https://pokeres.bastionbot.org/images/pokemon/1.png\"; // sprites from bashionbot.org\r\n        const backstring1 = stringurl1.slice(0,-5); // splitting above string till pokemon/\r\n        const imageURL = backstring1 + pokemonIndex + \".png\"; // creating the imageURL using sprites for each pokemon\r\n        this.setState({imageURL: imageURL, pokemonID:pokemonIndex}); // updating the state variables\r\n    }\r\n    \r\n    render(){\r\n        const stringurl2 = \"https://www.pokemon.com/us/pokedex/\"; // main URL for pokedex\r\n        const pokeurl = stringurl2 + this.state.poke.name + \"/\"; // creating the url for each pokemon in pokedex\r\n        const Name = \"\" + this.state.poke.name;\r\n        const CapName = Name.toLowerCase().split(' ').map((letter) => letter.charAt(0).toUpperCase() + letter.substring(1)).join(' ');\r\n        // Return some JSX here...\r\n        return( \r\n            <div className = \"pokeInfo\">\r\n                    <p className = \"Pokename\">{CapName}</p> \r\n                    <img className = \"pokeImage\" src = {this.state.imageURL} alt = {this.state.name} />\r\n                    <p></p>\r\n                    <a className = \"pokelink\" href = {pokeurl}>Link for {CapName}</a>\r\n                    <p className = \"weight\">Weight: {this.state.poke.weight}</p>\r\n                    <p className = \"height\">Height: {this.state.poke.height}</p>\r\n                    <p className = \"basexp\">Base Experience: {this.state.poke.base_experience}</p>\r\n                    <div className = \"buttonforpoke\">\r\n                        <Button variant = \"contained\" color=\"secondary\"  onClick={() => history.push(\"\")}>\r\n                            <p className = \"backpage\">Back to Pokedex</p>\r\n                        </Button>  \r\n                    </div>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default Pokemon;","import React from 'react';\nimport {Router, Route, Switch} from 'react-router-dom';\n\nimport TopBar from './components/TopBar';\nimport PokeList from './components/pokemon/PokeList';\nimport Pokemon from './components/pokemon/Pokemon';\nimport history from './components/pokemon/History';\n\nimport './App.css';\nimport './components/pokemon/PokemonCell.css';\nimport './components/pokemon/PokemonId.css';\nimport './components/TopBar.css';\n\n\nclass App extends React.Component {\n  \n  render(){\n    return( <div className = \"App\">\n      <TopBar />\n      <Router history = {history}>\n        <Switch>\n          <Route exact path=\"/\">\n            <p className = \"PokeKnowmore\">Click on Pokemon to know more</p>\n            <PokeList />\n          </Route>\n          <Route exact path=\"/:pokemonID\" component = {Pokemon} />\n        </Switch>\n      </Router>\n    </div>);\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />  \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}